#!/bin/bash

# `lecstors-stack` will call `docker-compose` with the preferred ENV vars set
#   - COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
#     - these enable us to use per-package dockerIgnore files to optimise the docker
#       context copied during a build
#   - BUILD_ENV, NODE_ENV, TAG
#     - will all be set to either "development" or "production"
#   - COMPOSE_FILE
#     - loads the base docker-compose.yml and the dev or prod docker-compose.*.yml
#     - defaults to dev if `prod` is not the first argument to `lecstors-stack`

help () {
cat <<-END

Usage:
  $ lecstors-stack [dev|prod] [command or docker-compose command]
------
  help | -h | --help   - display this help

  cypress open - open cypress locally
  cypress run  - run cypress locally
  cypress up   - run cypress in docker

  recreate [service/s] - up --force-recreate
  stopup [service/s]   - stop and up
  stopupl [service/s]  - stop and upl
  update               - pull updated images and recreate
  upl [service/s]      - bring up services (detached and logged)

  test                   - run all tests locally (yarn test && cypress)
  k8s config             - update Kubernetes config from docker-compose
  k8s create [namespace] - create a namespace
  k8s apply [namespace]  - apply the config to the cluster

  config build      - rebuild the config module
  config [dev] dump - dump the development config
  config prod dump  - dump the production config

  react-app [dev] start - start a development build
  react-app prod start - build and serve a production build
  
  react-ui build  - build the react-ui component library

END
}

dc-raw () {
  echo "dc-raw" "$@"
  local mode="dev"
  local build_env="development"
  local node_env="development"
  if [ "$1" = "prod" ]
  then
    mode="prod"
    build_env="production"
    node_env="production"
  fi

  shift $((1)) # remove mode arg

  local OPTIND=1

  while getopts ":tp" opt; do
    echo "getopts case ${opt}"
    case ${opt} in
      t )
        node_env="test"
        ;;
      p )
        node_env="production"
        ;;
      \? ) echo "Usage: cmd [-t]"
        ;;
    esac
  done

  shift $((OPTIND - 1)) # remove any opts
  
cat <<-END
  mode: ${mode} build_env: ${build_env} node_env: ${node_env} args: ${*}

  COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 \
  COMPOSE_FILE=docker-compose.yml:docker-compose.${mode}.yml \\
  BUILD_ENV=${build_env} NODE_ENV=${node_env} TAG=${build_env}-${node_env} \\
  docker-compose ${@}
  
END

  if [ "${LECS_DRY}" != 1 ]
  then
    COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 \
    COMPOSE_FILE=docker-compose.yml:docker-compose."${mode}".yml \
    BUILD_ENV="${build_env}" NODE_ENV="${node_env}" TAG="${build_env}-${node_env}" \
    docker-compose "${@}"
  fi
}

kubernetes () {
  case $2 in
    config)
      BUILD_ENV=production TAG=production kompose convert -o kubernetes/production/kompose
      ;;
    create)
      kubectl create namespace "${3-lecstors-prod}"
      ;;
    apply)
      kubectl apply -n "${3-lecstors-prod}" -R -f kubernetes/production
      ;;
    \? ) echo "Usage: k8s config | create | apply"
      ;;
    # *)
    #   dc-raw "$@"
    #   ;;
  esac
}

cypress () {
  case $2 in
    open)
      yarn workspace @lecstor/cypress run open
      ;;
    run)
      yarn workspace @lecstor/cypress run run
      ;;
    up)
      dc-raw dev up --no-deps cypress
      ;;
    # *)
    #   dc-raw "$@"
    #   ;;
  esac

}

dc-command () {
  echo "dc-command" "$@"
  case $2 in
    cypress)
      cypress "$1" "${@:3}"
      ;;
    k8s)
      kubernetes "$1" "${@:3}"
      ;;
    recreate)
      dc-raw "$1" up -d --force-recreate --no-deps "${@:3}" \
      && dc-raw "$1" logs -f --tail=0 "${@:3}"
      ;;
    remove-node_modules)
      rm -r node_modules
      for d in {apps,modules,services,tools}/*/node_modules;
        do echo "$d"
        rm -r "$d"
      done
      ;;
    stopup)
      dc-raw "$1" stop "${@:3}" \
      && dc-raw "$1" up -d --no-deps "${@:3}"
      ;;
    stopupl)
      dc-raw "$1" stop "${@:3}" \
      && dc-raw "$1" up -d --no-deps "${@:3}" \
      && dc-raw "$1" logs -f --tail=0 "${@:3}"
      ;;
    test)
      yarn wsrun --skip-missing -c test \
      && yarn workspace @lecstor/cypress run run
      ;;
    update)
      dc-raw "$1" pull --ignore-pull-failures \
      && dc-raw "$1" up -d --force-recreate \
      && dc-raw "$1" logs -f --tail=0
      ;;
    upl)
      dc-raw "$1" up -d "${@:3}" \
      && dc-raw "$1" logs -f --tail=0 "${@:3}"
      ;;

    "config")
      case $3 in
        build)
          yarn workspace @lecstor/config run build
          ;;
        *)
          case $1 in
            dev)
              case $3 in
                dump)
                  yarn workspace @lecstor/config run dump-config
                  ;;
              esac
            ;;
            prod)
              case $3 in
                dump)
                  NODE_ENV=production yarn workspace @lecstor/config run dump-config
                  ;;
              esac
            ;;
          esac
        ;;
      esac
    ;;

    "react-app")
      case $1 in
        dev)
          case $3 in
            start)
              yarn workspace @lecstor/react-app start
              ;;
          esac
        ;;
        prod)
          case $3 in
            start)
              yarn workspace @lecstor/react-app run build
              yarn workspace @lecstor/react-app serve-build
            ;;
          esac
        ;;
      esac
    ;;

    "react-ui")
      case $3 in
        build)
          yarn workspace @lecstor/react-ui run build
          ;;
      esac
    ;;

    "docker-stats")
      docker stats $(docker ps --format="{{.Names}}")
      ;;
    "docker-ram")
      docker run --rm --privileged debian:jessie-slim df -h
      ;;
    "docker-inode")
      docker run --rm --privileged debian:jessie-slim df -h -i
      ;;
    help | -h | --help)
      help
      ;;
    *)
      dc-raw "$@"
      ;;
  esac
}

mode="dev"
if [ "$1" = "prod" ] || [ "$1" = "dev" ]
then
  echo "explicit"
  mode="$1"
  args=("${@:2}")
else
  echo "dev default"
  args=("$@")
fi
dc-command "${mode}" "${args[@]}"
